#!/bin/bash
# Copyright Â© 2012 Opinsys Oy
#
# Based on the example from libpam-sshauth
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

test -n "$PAM_USER" || exit 1
[[ $PAM_USER = "lightdm" ]] && exit 0

export PATH=$PATH:/bin:/usr/bin:/sbin:/usr/sbin
SERVER="server"
SOCKETDIR="/var/run"
#SOCKET="${SOCKETDIR}/ldm_socket_$$_$SERVER"
SOCKET="${SOCKETDIR}/ldm_socket_0_server"
export DISPLAY=${PAM_TTY}
export LDM_USERNAME=$PAM_USER
export LDM_SERVER=$SERVER
export SSH_ASKPASS="/usr/bin/shm_askpass"

test -x $(which daemon) || exit 1


#
# Set XAUTHORITY based on current display manager.
#
setenvxauth() {
    #
    # Use DM's XAUTHORITY
    #
    if [ -z "${XAUTHORITY}" ]; then
        if [ $PAM_SERVICE = "lightdm" ]; then
            export XAUTHORITY="/var/run/lightdm/root/$DISPLAY"

        elif [ $PAM_SERVICE = "gdm" ]; then
            export XAUTHORITY="$(ls -d1 /var/run/gdm/auth-for-gdm*|head -n 1)/database"

        elif [ $PAM_SERVICE = "xdm" ]; then
            export XAUTHORITY="$(ls -1 /var/lib/xdm/authdir/authfiles/*|head -n 1)"

        else
            logger "ltsp-session: unsupported service: $PAM_SERVICE"
            exit 1
        fi
    fi
    logger "ltsp-session: using XAUTHORITY file $XAUTHORITY"
}


#
# Sets necessary environment variables for LDM scripts.
#
setenv() {
    #
    # Load lts.conf
    #
    PROCESS_LTS_CONF=Yes
    . /usr/share/ltsp/ltsp_config
    # NOTE: screen-x-common scripts break login
    #. /usr/share/ltsp/screen-x-common

    setenvxauth

    #get_xfs_settings "$LDM_SERVER"

    #
    # Define our session
    #
    SESSIONLIST="/etc/X11/xinit/Xsession \
                 /etc/X11/Xsession \
                 /usr/lib/X11/xdm/Xsession \
                 /etc/X11/xdm/Xsession"
    if [ -z "${LDM_XSESSION}" ]; then        # If admin hasn't specified session
        for SESSION in ${SESSIONLIST}; do
            if [ -x ${SESSION} ]; then
                export LDM_DEFAULT_XSESSION=${SESSION}
                break
            fi
        done
    fi

    export LDM_XSESSION=$LDM_DEFAULT_XSESSION
    #export LDM_LANGUAGE
    #export LDM_SELECTED_SESSION

    #
    # Set X properties by calling appropriate xinitrc.d scripts.
    # Required for LTSPFS.
    #
    if [ -x /usr/share/ltsp/xinitrc ]; then
        /usr/share/ltsp/xinitrc
    fi
}


#
# Wait for our socket to appear.
#
waitfor () {
    S=$1

    while [ ! -S "${S}" ]; do
        logger "ltsp-session: waiting for socket $S"
        sleep 1
    done
}


#
# Open ssh control socket.
#
# The "daemon" utility backgrounds any script or command, and
# detaches from the controlling terminal.
# With no controlling terminal, and $DISPLAY set, ssh will use
# "shm_askpass" specified in SSH_ASKPASS to obtain the password.
#
open_socket () {
    S=$1

    if [ -n "${DISPLAY}" ]; then
        daemon -i -- ssh -K -q -N -Y -M -K -S "${S}" -p ${SSH_OVERRIDE_PORT:-22} -l ${PAM_USER} ${LDM_SERVER}

        waitfor "${S}"

        logger "ltsp-session: socket $S open"
    fi
}


#
# Close ssh control socket.
#
close_socket () {
    S=$1
    ssh -q -S "$S" -O exit ${SERVER}
}


#
# This is a session helper script to be used in conjunction with pam_exec.
#
case ${PAM_TYPE} in

auth)

    logger "ltsp-session: start auth"

    # Set XAUTHORITY. Required here for LDM_DIRECTX.
    setenvxauth

    #
    # Construct our socket directory.
    #
    if [ ! -d "${SOCKETDIR}" ]; then
        mkdir -p "${SOCKETDIR}"
    fi

    ;;


open_session)

    #
    # Open user session.
    # The control socket is first spawn, then the session is launched
    # using the same socket.
    #

    logger "ltsp-session: open session"

    setenv

    if boolean_is_true "$LTSP_FATCLIENT"; then
        logger "ltsp-session: fat clients are not supported sorry :("

    else
        logger "ltsp-session: run pressh scripts"
        /usr/share/ltsp-lightdm/run-rc-scripts pressh

        open_socket "${SOCKET}"
        export LDM_SOCKET=${SOCKET}
        # get the IP address via the ssh tunnel
        export LDMINFO_IPADDR=$(
            ssh -S ${LDM_SOCKET} $LDM_SERVER 'echo $SSH_CLIENT'|cut -d' ' -f1)

        test -n "$LDM_SERVER" || exit 1
        test -n "$LDM_SOCKET" || exit 1

        logger "ltsp-session: start thin client"

        /usr/share/ltsp-lightdm/run-rc-scripts start
        daemon -i -- /usr/share/ltsp-lightdm/run-rc-scripts xsession
    fi

    ;;


close_session)

    #
    # We're closing the session down, so cause the socket to exit.
    # Libnss-sshsock needs to finalise before closing the socket.
    #
    logger "ltsp-session: close session"
    sleep 1
    close_socket "${SOCKET}"

    ;;

esac

# print environment variables to debug file
[[ -n $ENV_DEBUG ]] && env > $ENV_DEBUG

exit 0
